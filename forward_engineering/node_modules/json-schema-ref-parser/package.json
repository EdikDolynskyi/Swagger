{
  "_args": [
    [
      {
        "raw": "json-schema-ref-parser@^6.0.3",
        "scope": null,
        "escapedName": "json-schema-ref-parser",
        "name": "json-schema-ref-parser",
        "rawSpec": "^6.0.3",
        "spec": ">=6.0.3 <7.0.0",
        "type": "range"
      },
      "C:\\Users\\Pascal\\.hackolade\\plugins\\Swagger\\forward_engineering\\node_modules\\swagger-parser"
    ]
  ],
  "_from": "json-schema-ref-parser@^6.0.3",
  "_hasShrinkwrap": false,
  "_id": "json-schema-ref-parser@6.1.0",
  "_location": "/json-schema-ref-parser",
  "_nodeVersion": "10.15.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/json-schema-ref-parser_6.1.0_1550747597821_0.30601486687771695"
  },
  "_npmUser": {
    "name": "jamesmessinger",
    "email": "james.messinger@gmail.com"
  },
  "_npmVersion": "6.4.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "json-schema-ref-parser@^6.0.3",
    "scope": null,
    "escapedName": "json-schema-ref-parser",
    "name": "json-schema-ref-parser",
    "rawSpec": "^6.0.3",
    "spec": ">=6.0.3 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/swagger-parser"
  ],
  "_resolved": "https://registry.npmjs.org/json-schema-ref-parser/-/json-schema-ref-parser-6.1.0.tgz",
  "_shasum": "30af34aeab5bee0431da805dac0eb21b574bf63d",
  "_shrinkwrap": null,
  "_spec": "json-schema-ref-parser@^6.0.3",
  "_where": "C:\\Users\\Pascal\\.hackolade\\plugins\\Swagger\\forward_engineering\\node_modules\\swagger-parser",
  "author": {
    "name": "James Messinger",
    "url": "https://jamesmessinger.com"
  },
  "browser": {
    "fs": false
  },
  "bugs": {
    "url": "https://github.com/APIDevTools/json-schema-ref-parser/issues"
  },
  "contributors": [
    {
      "name": "Boris Cherny",
      "email": "boris@performancejs.com"
    }
  ],
  "dependencies": {
    "call-me-maybe": "^1.0.1",
    "js-yaml": "^3.12.1",
    "ono": "^4.0.11"
  },
  "description": "Parse, Resolve, and Dereference JSON Schema $ref pointers",
  "devDependencies": {
    "@types/json-schema": "^7.0.1",
    "@types/node": "^11.9.4",
    "chai": "^4.2.0",
    "coveralls": "^3.0.2",
    "eslint": "^5.12.0",
    "eslint-config-modular": "^7.0.0",
    "http-server": "^0.11.1",
    "karma": "^4.0.0",
    "karma-chai": "^0.1.0",
    "karma-chrome-launcher": "^2.2.0",
    "karma-cli": "^2.0.0",
    "karma-coverage": "^1.1.2",
    "karma-edge-launcher": "^0.4.2",
    "karma-firefox-launcher": "^1.1.0",
    "karma-host-environment": "^1.1.7",
    "karma-ie-launcher": "^1.0.0",
    "karma-mocha": "^1.3.0",
    "karma-safari-launcher": "^1.0.0",
    "karma-sauce-launcher": "^2.0.2",
    "karma-verbose-reporter": "0.0.6",
    "mocha": "^6.0.0",
    "npm-check": "^5.9.0",
    "nyc": "^13.1.0",
    "simplifyify": "^7.0.1",
    "typescript": "^3.2.2",
    "version-bump-prompt": "^4.2.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-pXe9H1m6IgIpXmE5JSb8epilNTGsmTb2iPohAXpOdhqGFbQjNeHHsZxU+C8w6T81GZxSPFLeUoqDJmzxx5IGuw==",
    "shasum": "30af34aeab5bee0431da805dac0eb21b574bf63d",
    "tarball": "https://registry.npmjs.org/json-schema-ref-parser/-/json-schema-ref-parser-6.1.0.tgz",
    "fileCount": 28,
    "unpackedSize": 2000924,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcbofOCRA9TVsSAnZWagAAWfYP/jdcSOsZmbjdd9H6fmNc\nmduMsW677DHhE9U6b/QYL0llkLJNdbSjJF89noNVi8nHXsPVbmXlpIOmLull\nE7YsUGiGNZQiI2iMGfXg/mu5CuVyMBKbmOmiLJQlB8L+SfsZ77FMYPyeSFd+\n6S4u0K8BdnSGYRdsmZ0VrAZvAi0h9dhjDQnBUGRARzQDDB42xHNf1y3WX+uU\nuYct6ESQ15t/ETqFJ7+9ii3ve0yGNSwGIMHDkw25DRTSQIJ5hsgovooLHf4c\nifZiSGFTDIrEaCek3M8WO7jnDplSjHwKWODzBTh8n2gDaW8Oiy+EQDyOq9xa\n5yKzNR4lV8h2sx57e9hg8wst+yhg0FrMdt02FplItunucXP2tfAXBczL5oyY\nG0Hyqlxpoz/Mt6Fg5oIUPt8nNn3PDPAU+tgT+wuKKsVuXokC+fv8CmDlJs13\nGLYnZx6rufeiE8rqiAmFeHyUl8KddmYpA3RDMEnZLPmKG548BU76F+ujuLF/\nyDsAv8DvoZgKg629yEyKzsGLIx26Rlp4hVURJHPQUNlRnRp1d2VouxYyVabf\nSP6FJ6tj6q0FposzskOmdNUDzRaXwA2vIqf+dvZ8bLUgQSkyKEUw5S+uUh5t\nbwrhvX/WYydc/jvaNSMO6b83X/Ov+wWht2jowpVlq+uwoBBC8bWeiuJJRxoM\nsneA\r\n=WOBt\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist/ref-parser.js",
    "dist/ref-parser.js.map",
    "dist/ref-parser.min.js",
    "dist/ref-parser.min.js.map",
    "lib"
  ],
  "gitHead": "29ea8693e288e5ced3ebd670d545925f16a4ed17",
  "homepage": "https://apidevtools.org/json-schema-ref-parser/",
  "keywords": [
    "json",
    "schema",
    "jsonschema",
    "json-schema",
    "json-pointer",
    "$ref",
    "dereference",
    "resolve"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "bigstickcarpet",
      "email": "bigstickcarpet@gmail.com"
    }
  ],
  "name": "json-schema-ref-parser",
  "optionalDependencies": {},
  "readme": "JSON Schema $Ref Parser\n============================\n#### Parse, Resolve, and Dereference JSON Schema $ref pointers\n\n[![Build Status](https://api.travis-ci.com/APIDevTools/json-schema-ref-parser.svg?branch=master)](https://travis-ci.com/APIDevTools/json-schema-ref-parser)\n[![Coverage Status](https://coveralls.io/repos/github/APIDevTools/json-schema-ref-parser/badge.svg?branch=master)](https://coveralls.io/github/APIDevTools/json-schema-ref-parser)\n\n[![npm](https://img.shields.io/npm/v/json-schema-ref-parser.svg)](https://www.npmjs.com/package/json-schema-ref-parser)\n[![Dependencies](https://david-dm.org/APIDevTools/json-schema-ref-parser.svg)](https://david-dm.org/APIDevTools/json-schema-ref-parser)\n[![License](https://img.shields.io/npm/l/json-schema-ref-parser.svg)](LICENSE)\n\n\n[![OS and Browser Compatibility](https://apidevtools.org/img/badges/ci-badges-with-ie.svg)](https://travis-ci.com/APIDevTools/json-schema-ref-parser)\n\n\nThe Problem:\n--------------------------\nYou've got a JSON Schema with `$ref` pointers to other files and/or URLs.  Maybe you know all the referenced files ahead of time.  Maybe you don't.  Maybe some are local files, and others are remote URLs.  Maybe they are a mix of JSON and YAML format.  Maybe some of the files contain cross-references to each other.\n\n```javascript\n{\n  \"definitions\": {\n    \"person\": {\n      // references an external file\n      \"$ref\": \"schemas/people/Bruce-Wayne.json\"\n    },\n    \"place\": {\n      // references a sub-schema in an external file\n      \"$ref\": \"schemas/places.yaml#/definitions/Gotham-City\"\n    },\n    \"thing\": {\n      // references a URL\n      \"$ref\": \"http://wayne-enterprises.com/things/batmobile\"\n    },\n    \"color\": {\n      // references a value in an external file via an internal reference\n      \"$ref\": \"#/definitions/thing/properties/colors/black-as-the-night\"\n    }\n  }\n}\n```\n\n\nThe Solution:\n--------------------------\nJSON Schema $Ref Parser is a full [JSON Reference](https://tools.ietf.org/html/draft-pbryan-zyp-json-ref-03) and [JSON Pointer](https://tools.ietf.org/html/rfc6901) implementation that crawls even the most complex [JSON Schemas](http://json-schema.org/latest/json-schema-core.html) and gives you simple, straightforward JavaScript objects.\n\n- Use **JSON** or **YAML** schemas &mdash; or even a mix of both!\n- Supports `$ref` pointers to external files and URLs, as well as [custom sources](https://apidevtools.org/json-schema-ref-parser/docs/plugins/resolvers.html) such as databases\n- Can [bundle](https://apidevtools.org/json-schema-ref-parser/docs/ref-parser.html#bundlepath-options-callback) multiple files into a single schema that only has _internal_ `$ref` pointers\n- Can [dereference](https://apidevtools.org/json-schema-ref-parser/docs/ref-parser.html#dereferencepath-options-callback) your schema, producing a plain-old JavaScript object that's easy to work with\n- Supports [circular references](https://apidevtools.org/json-schema-ref-parser/docs/#circular-refs), nested references, back-references, and cross-references between files\n- Maintains object reference equality &mdash; `$ref` pointers to the same value always resolve to the same object instance\n- [Tested](https://apidevtools.org/json-schema-ref-parser/test/) in Node, io.js, and all major web browsers on Windows, Mac, and Linux\n\n\nExample\n--------------------------\n\n```javascript\n$RefParser.dereference(mySchema, function(err, schema) {\n  if (err) {\n    console.error(err);\n  }\n  else {\n    // `schema` is just a normal JavaScript object that contains your entire JSON Schema,\n    // including referenced files, combined into a single object\n    console.log(schema.definitions.person.properties.firstName);\n  }\n});\n```\n\nOr use [Promises syntax](http://javascriptplayground.com/blog/2015/02/promises/) instead. The following example is the same as above:\n\n```javascript\n$RefParser.dereference(mySchema)\n  .then(function(schema) {\n    console.log(schema.definitions.person.properties.firstName);\n  })\n  .catch(function(err) {\n    console.error(err);\n  });\n```\n\nFor more detailed examples, please see the [API Documentation](https://apidevtools.org/json-schema-ref-parser/docs/)\n\n\nInstallation\n--------------------------\n#### Node\nInstall using [npm](https://docs.npmjs.com/about-npm/):\n\n```bash\nnpm install json-schema-ref-parser\n```\n\nThen require it in your code:\n\n```javascript\nvar $RefParser = require('json-schema-ref-parser');\n```\n\n#### Web Browsers\nReference [`ref-parser.js`](dist/ref-parser.js) or [`ref-parser.min.js`](dist/ref-parser.min.js) in your HTML:\n\n```html\n<script src=\"https://unpkg.com/json-schema-ref-parser/dist/ref-parser.min.js\"></script>\n<script>\n  $RefParser.dereference(mySchema)\n    .then(function(schema) {\n      console.log(schema.definitions.person.properties.firstName);\n    })\n    .catch(function(err) {\n      console.error(err);\n    });\n</script>\n```\n\n\nAPI Documentation\n--------------------------\nFull API documentation is available [right here](https://apidevtools.org/json-schema-ref-parser/docs/)\n\n\nContributing\n--------------------------\nI welcome any contributions, enhancements, and bug-fixes.  [File an issue](https://github.com/APIDevTools/json-schema-ref-parser/issues) on GitHub and [submit a pull request](https://github.com/APIDevTools/json-schema-ref-parser/pulls).\n\n#### Building/Testing\nTo build/test the project locally on your computer:\n\n1. __Clone this repo__<br>\n`git clone https://github.com/APIDevTools/json-schema-ref-parser.git`\n\n2. __Install dependencies__<br>\n`npm install`\n\n3. __Run the build script__<br>\n`npm run build`\n\n4. __Run the tests__<br>\n`npm test`\n\n5. __Start the local web server__<br>\n`npm start` (then browse to [http://localhost:8080/test/](http://localhost:8080/test/))\n\n\nLicense\n--------------------------\nJSON Schema $Ref Parser is 100% free and open-source, under the [MIT license](LICENSE). Use it however you want.\n\nBig Thanks To\n--------------------------\nThanks to these awesome companies for their support of Open Source developers ❤\n\n[![Travis CI](https://jsdevtools.org/img/badges/travis-ci.svg)](https://travis-ci.com)\n[![SauceLabs](https://jsdevtools.org/img/badges/sauce-labs.svg)](https://saucelabs.com)\n[![Coveralls](https://jsdevtools.org/img/badges/coveralls.svg)](https://coveralls.io)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/APIDevTools/json-schema-ref-parser.git"
  },
  "scripts": {
    "build": "simplifyify lib/index.js --outfile dist/ref-parser.js --standalone \\$RefParser --bundle --debug --minify",
    "bump": "bump --prompt --grep dist/* --tag --push --all",
    "coverage": "npm run coverage:node && npm run coverage:browser",
    "coverage:browser": "npm run build -- --coverage && npm run test:browser -- --coverage",
    "coverage:node": "nyc --reporter=text --reporter=lcov --report-dir coverage/node mocha",
    "lint": "eslint lib test/fixtures test/specs",
    "release": "npm run upgrade && npm test && npm run bump",
    "start": "http-server -c-1 -o http://localhost:8080/test/",
    "test": "npm run test:node && npm run test:browser && npm run test:typescript && npm run lint",
    "test:browser": "npm run build && karma start --single-run",
    "test:node": "mocha",
    "test:typescript": "tsc --noEmit --strict --lib esnext test/specs/typescript-definition.spec.ts",
    "upgrade": "npm-check -u",
    "watch": "npm run build -- --watch"
  },
  "typings": "lib/index.d.ts",
  "version": "6.1.0"
}
